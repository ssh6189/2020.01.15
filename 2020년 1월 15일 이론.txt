도커

App1/App2/App3
Bins/Lib
Guest OS
Hypervisor
Infrastructure

App1/App2/App3
Bins/Lib
Container Engineer

고언어?
1.CPU 아키텍쳐가 호환이되어야한다.
2.운영체제가 맞아야한다.

도커가 고언어로 구성되어있다.
도커는 실행파일이 1개

고언어 : 모든 시스템 라이브러리를 내부에 가지고 있다. 디펜던시가 없다.
도커도 마찬가지로, 이미지 내부에 실행파일과 시스템 디펜던시를 파일내에 가지고 있다.

윈도우 기반을 가지고 리눅스를 돌릴 수 있다.
커널이 일치하기 때문이다.
이것이 도커의 핵심원리



User Applications : 우리가 사용하는 영역
(파이썬, 자바등의 언어 아래에서 C라이브러리 호출)
GNU C Library(glibc)

커널 영역
System Call Interface
Kernel
Architeture - Dependent Kernel Code
Hardware Platform

linux ls = window dir

amazon의 linux 실행파일을 Ubuntu에서 실행하면?
bash는 안되고, zip은 됨

Overlay File System



Docker의 이미지

Writeable Container
-------------
Add Apache
Add emacs(편집기)
Ubuntu
-------------
Namespace, Device Mapper, Kernel
Kernel

명령어 하나가 레이어다.



Control Group
접근은 가능하지만, 제약을 둔다.
CPU, Memory, Network, Storage I/O
#이게 클라우드의 기원

ps aux : 프로세서 보는 명령어

Unshare : 프로그램을 부모프로세스와 공유되지 않는 네임스페이스에서 실행시켜준다.

도커 데모
이미지 빌드/실행
https://asciinema.org/a/17906

fore ground  모드와 background모드 2가지가 존재

캐노니컬 - 우분투회사
우리나라는 REDDIT



웹개발

파이썬 Flask

project -> open builder kakao

만들어진것을 활용하는것을 할 예정 - 사용성, 활용성에 초점

비전공 극복?
공통적인 특징 : 세상이 요구하는 틀에 자신을 맞춘다.
자기가 할 수 있는것을 부각, 보통 뭘 더해야하냐고 묻는다.

자소서 다 못 본다.
반을 잡아서 버린다????
여기 안걸린것도 운이다? 실력이다?

비전공이라고 해서 움츠리지 말자
수학 잘함 0.1%

자료구조, 네트워크, 운영체제는 꼭보자
컴파일러 : lex, bison

신입때는 넓게, 지금은 자기가 뭘 하나 팔 수 없는 시기 한곳만 파면, 시너지 효과가 안난다.
3년차 개발자도 l4와 l7도 잘 모른다.

시스템 관리자
개발자 ->로컬, 클라우드

LAN/VPC

B-E

ELB (EC2 - disk
      EC2 - disk
      EC2 - disk



친구, 나
카카오톡 채널(플친)
챗봇(openbuilder)
바로 동작이 안된다. 로직만 가지고 있다.



엔티티 : 봇이 이해할 수 있는 사전 정보(카테고리)

사용자 발화 : 사용자가 내뱉는 문장

다이얼플로어 : 로직만 존재

웰컴블록 : 환영
폴백블록 : 처리할 블록이 없을 때, 학습이 안된 단어는 폴백으로 떨어진다. 사용자의 말과, 시간 등의 정보를 토대로 개발자가 업데이트에 활용
탈출블록 : 사용자가 대화에서 나가고 싶을때
휴지통블록 : 

카카오 오픈빌더의 학습은 : 처리 안된 문장들을 모아놓고, 공통점을 발견해서, 기존 블록에 넣는것

네이버 오타를 다 등록해서 교정

소통은 json, 통신은 http

유저 id로 사용자 식별 가능
동일한 사용자가 동일한곳을 사용한다면, 아이디는 고정

심심이? 연속적으로 안된다.



발화 -> 동작 -> 출력



발화들이 토시하나까지 같을 필요까지는 없다.
자연어처리가 어느정도 되어있다.



get : url로 모든 데이터가 넘어가는 방식
우리가 흔히 사용하는 http://www.naver.com/?search keyword = 멀티캠퍼스
긴데이터를 보낼 수 없다.

post url : 데이터나 파라미터를 url로 보내지 않아서, url로 데이터가 가는지 안가는지 알 수가 없으며, 길이가 무제한

이미지 업로드 등은 전부  post 방식

RESTAPI : url과 바디, 메소드를 이용을 해서 통신할때 주고받을 때 사용
get, post. put. delete
이 4가지가 CRUD

/a/b/c/

nave.com/store/trouser/123
Get : 이 상품의 정보가 그대로 나온다.
Delete : 삭제
put : 업데이트

URL은 무조건 리소스

파람과 디테일 파라미터는 있다.



이모지 : 텍스트더 아닌데 테스트


텍스트 : 당신은 용입니다.
이모지 
이미지형
리스트형 : 뉴스검색결과나 요약해서 리스트, 네이버 카페 게시글을 크롤링하여, 신규 글이 날라오면 알람
커머스형 

컨텍스트 : 문맥

A의 아웃폿은 B의 입력
챗봇은 목적을 확실히 해서 만들어야한다.

같은 개발자라해도 도메인이 어디냐에 따라 다른 길을 간다.

과거 : 솔루션, Gmarket, 인터파크

커머스?

쿠팡이 aws의 vip
쿠팡구조
영어권 > 중국어권 > 한국개발자??



#################################################################
Flask : Nest API : "/Name card" 이미지 -> save
                                                    /tmp/1.jpg
                                                    인식 python info.py/tmp/1.jpg
                                                          --------
                                                          <이름>
                                                          <전화번호>
                                                          <이메일>
                                                   version 2.0
                                                   template:
                                                   simpletext:
                                                                이름\n
                                                                전화\n
                                                             이메일\n

            ------<------   response ---------------<---
카톡채널

송상욱

%주의 : 1초 -> 1.5초 이상 걸리면, 1자가 없어진다. 즉, 명함인식을 1초안에 끝내야한다.
내일 오후면 다 만들어진다????

remember 명함 인식 앱



파이썬 장고와, framework라는 프레임워크가 존재

6줄로도 서버가 뜬다??



만든것 구동 : 경로로 이동 후

set FLASK_APP=파일 명

flask run